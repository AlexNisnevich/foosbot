// Generated by CoffeeScript 1.3.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.GameView = {
    initialize: function() {
      this.enable_sorting();
      return this.enable_events();
    },
    enable_sorting: function() {
      $("#box").sortable({
        change: function() {
          return GameController.reposition(GameView.get_arrangement());
        }
      });
      return $("#box").disableSelection();
    },
    enable_events: function() {
      $(".player").click(function() {
        return GameController.score(GameView.get_name_from_elt(this));
      });
      $("#undo").click(function() {
        return GameController.undo_score();
      });
      return $("#submit-game").click(function() {
        return GameController.send_results();
      });
    },
    get_arrangement: function() {
      var players;
      players = $('.player .name').map(function(i, elt) {
        return elt.innerText;
      });
      return [[players[1], players[0]], [players[2], players[3]]];
    },
    get_name_from_elt: function(elt) {
      return $(elt).find('.name').text();
    },
    set_scores: function(scores, totalScores) {
      $(".black .score .value").text(scores[0]);
      $(".yellow .score .value").text(scores[1]);
      $(".black .total .value").text(totalScores[0]);
      return $(".yellow .total .value").text(totalScores[1]);
    },
    set_game_num: function(num) {
      return $("#game .value").text(num);
    }
  };

  this.GameController = {
    server_url: "",
    score_limit: 5,
    match: [],
    current_game: {},
    total_scores: [0, 0],
    initialize: function(opts) {
      this.new_game(GameView.get_arrangement());
      return this.server_url = opts.server_url;
    },
    new_game: function(players) {
      this.current_game = {
        goals: [],
        arrangement: players,
        scores: [0, 0]
      };
      return GameView.set_game_num(this.match.length + 1);
    },
    score: function(player) {
      var goal, scoring_team;
      goal = {
        time: new Date(),
        scorer: player,
        arrangement: this.current_game.arrangement
      };
      this.current_game.goals.push(goal);
      scoring_team = (__indexOf.call(this.current_game.arrangement[0], player) >= 0 ? 0 : 1);
      this.current_game.scores[scoring_team]++;
      this.total_scores[scoring_team]++;
      if (this.current_game.scores[0] === this.score_limit || this.current_game.scores[1] === this.score_limit) {
        this.match.push(this.current_game);
        this.new_game(this.current_game.arrangement);
      }
      return this.refresh_scores();
    },
    undo_score: function() {
      var goal, scoring_team, _ref;
      if (goal = this.current_game.goals.pop()) {
        scoring_team = ((_ref = goal.scorer, __indexOf.call(this.current_game.arrangement[0], _ref) >= 0) ? 0 : 1);
        this.current_game.scores[scoring_team]--;
        this.total_scores[scoring_team]--;
        return this.refresh_scores();
      }
    },
    refresh_scores: function() {
      return GameView.set_scores(this.current_game.scores, this.total_scores);
    },
    reposition: function(new_arrangement) {
      return this.current_game.arrangement = new_arrangement;
    },
    send_results: function() {
      return $.post(this.server_url, this.match);
    }
  };

}).call(this);
